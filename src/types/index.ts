// types/index.ts
import { Timestamp } from 'firebase-admin/firestore';

export type UserRole = 'student' | 'teacher' | 'school_admin' | 'admin' | 'parent'; 

// Basic user profile information
export interface User {
  id: string;
  uid: string; // Firebase Auth UID
  email: string;
  name?: string;
  displayName?: string;
  role: 'student' | 'teacher' | 'parent';
  schoolId?: string; 
  createdAt?: Timestamp; // Firestore Timestamp
  updatedAt: string; 
  avatar?: Avatar;
}

// Comprehensive user data from Firestore, including all subscription fields
export interface UserData {
  id: string; 
  email: string;
  name: string;
  role: UserRole;
  schoolId?: string;
  createdAt: string; 
  updatedAt?: string; 
  avatar?: Avatar;

  stripeCustomerId?: string;

  // Gocardless subscription fields
  customerId?: string;
  mandateId?: string;
  creditorId?: string;
  billingRequestId?: string;
  subscriptionId?: string;
  subscriptionPlan?: string;
  subcriptionStartDate?: string;
  subcriptionEndDate?: string;
  subcriptionCancelledDate?: string;
  subcriptionStatus?: string;
  paymentStatus?: string;
  paymentId?: string;
  amount?: number;
  
  // Fields for school admin subscription
  schoolName?: string; 
  position?: string;   
  isSchoolAdminSubscribed?: boolean; 
  schoolAdminSubscriptionId?: string;
  schoolAdminStripePriceId?: string;
  schoolAdminCurrentPeriodEnd?: string; 
  schoolAdminMonthlyQuota?: number; 
  schoolAdminGenerationsThisMonth?: number; 
  schoolAdminLastQuotaReset?: string; 

  // Fields for parent subscription
  isParentSubscribed?: boolean;
  parentSubscriptionId?: string;
  parentStripePriceId?: string; 
  parentCurrentPeriodEnd?: string; 
  parentMonthlyQuota?: number; // e.g., 25
  parentGenerationsThisMonth?: number;
  parentLastQuotaReset?: string; 
}

export interface Avatar {
  background: string;
  character: string;
  hat: string;
  outfit: string;
}

export interface SongData {
  id?: string;
  udioId?: string; 
  workId: string; 
  title?: string; 
  prompt?: string; 
  lyrics?: string; 
  tags?: string;
  subject?: string; // Added subject field
  imageUrl?: string;
  audioUrl?: string | null; 
  localPath?: string | null; 
  duration?: number;
  modelName?: string;
  status: 'processing' | 'complete' | 'failed' | 'pending_download'; 
  creatorId: string | null; 
  creatorEmail?: string | null; 
  schoolId?: string | null; // For songs generated by teachers under a school
  parentId?: string | null;  // For songs generated by parents
  createdAt: string; 
  updatedAt?: string; 
  udioCreateTime?: string; 
  errorMessage?: string; 
  imported?: boolean;
  read?: boolean;
}

export type AssignedSongWithTeacher = SongData & {
  assignedByTeacherId: string;
  assignedByTeacherName: string;
  assignedAt: string | Date;
};

export interface GenerateMusicApiResponse {
  message: string;
  workId: string;
  error?: string;
  song?: Partial<SongData>; // Include partial song data on initial response
}

export interface SongStatusApiResponse {
  status: 'complete' | 'processing' | 'error';
  song?: SongData;
  error?: string;
}

export interface UdioFeedApiResponse {
  code: number;
  message: string;
  data?: {
    type: string;
    request_body: Record<string, unknown>;
    response_data: Array<{
      id: string;
      audio_url: string;
      image_url: string;
      created_at: string;
      status: 'text' | 'first' | 'complete';
      title: string;
      prompt: string;
      tags: string;
      duration: number;
      model_name: string;
      extra_message: string;
      fail_message: string;
      error_message: string;
    }>;
    created_at: string;
  };
}

export interface Progress {
  songs: number;
  badges: number;
  points: number;
  streakDays: number;
  level: number;
  experience: number; 
  nextReminder?: { song: string; time: string; };
}

export interface Badge {
  id: string;
  name: string;
  description: string;
  image: string;
  earnedAt?: string;
}

export interface QuizQuestion {
  id: string; 
  questionText: string;
  options: string[]; 
  correctOptionIndex: number; 
}

export interface QuizData {
  id?: string; 
  title: string;
  description?: string;
  questions: QuizQuestion[];
  creatorId: string; 
  schoolId?: string; 
  timeLimitMinutes?: number; 
  createdAt: string; 
  updatedAt?: string; 
}

export interface QuizAssignment {
  id?: string; 
  quizId: string;
  studentId: string;
  assignedByTeacherId: string;
  assignedAt: string; 
  status: 'assigned' | 'completed'; 
  availableFrom?: string; 
  dueBy?: string; 
  completedAt?: string; 
  score?: number; 
  totalQuestions?: number; 
  submittedAnswers?: Array<{ questionId: string; selectedOptionIndex: number }>; 
  submittedLate?: boolean; 
}

export interface ParentLinkingCode {
  studentUid: string;
  schoolId?: string; 
  expiresAt: Timestamp; 
  status: 'active' | 'used' | 'expired';
  createdAt: Timestamp; 
}

export interface ClassData {
  id?: string; 
  teacherId: string; 
  schoolId?: string; 
  className: string;
  description?: string;
  studentIds: string[]; 
  createdAt: Timestamp; 
  updatedAt?: Timestamp; 
}

export interface SongCreationPayload {
  prompt: string,
  gpt_description_prompt: string,
  custom_mode: boolean,
  make_instrumental: boolean,
  title?: string,
  model?: string
}

export interface QuizAttempted {
  assignmentId?: string,
  quizId: string,
  quizTitle: string,
  studentId: string,
  studentName: string,
  completedAt?: string,
  score?: number,
  totalQuestions?: number,
  submittedLat?: boolean
}

export interface AttemptInfo {
  assignmentId: string;
  quizId: string;
  quizTitle: string;
  studentId: string;
  studentName: string;
  completedAt?: string;
  score?: number;
  totalQuestions?: number;
  submittedLate?: boolean;
}